10 Aug 2025
Red Black Trees

--------------------------------L1 : Unbalanced Trees --------------------------------

BST's have a problem. While it's true that on average a BST has O(log(n)) lookups, deletions, and insertions, that fundamental benefit can break down quickly.
If mostly sorted data, or even worse, completely sorted data, is inserted into a binary tree, 
the tree will be much deeper than it is wide. 
As you know by now, the Big O complexity of the tree's operations depend entirely on the depth of the tree.

--------------------------------L3 : Red-Black Trees --------------------------------

A red-black tree is a kind of binary search tree that solves the "balancing" problem. 
It contains a bit of extra logic to ensure that as nodes are inserted and deleted, 
the tree remains relatively balanced.
How It Works
Each node in an RB Tree stores an extra bit, called the "color": either red or black. 
The "color" ensures that the tree remains approximately balanced during insertions and deletions. 
When the tree is modified, the new tree is rearranged and repainted to restore the coloring properties that constrain how unbalanced the tree can become in the worst case.

List of Very Simple Rules
Each node is either red or black.
The root is black.
All Nil leaf nodes are black.
If a node is red, then both its children are black.
All paths from a single node go through the same number of black nodes to reach any of its descendant Nil (black) nodes.

--------------------------------L4 : Rules --------------------------------

Each node is either red or black
The root is black. This rule is sometimes omitted. Since the root can always be changed from red to black, but not necessarily vice versa, this rule has little effect on analysis.
All Nil leaf nodes are black.
If a node is red, then both its children are black.
All paths from a single node go through the same number of black nodes to reach any of its descendant NIL nodes.

--------------------------------L6 : Rotation --------------------------------

"Rotations" are what actually keep a red-black tree balanced. Every time one branch of the tree starts to get too long, we will "rotate" those branches to keep the tree shallow. A shallow tree is a healthy (fast) tree!

A properly-ordered tree pre-rotation remains a properly-ordered tree post-rotation
Rotations are O(1) operations
When rotating left:
The "pivot" node's initial parent becomes its left child
The "pivot" node's old left child becomes its initial parent's new right child

--------------------------------L7 : Fix Insert --------------------------------

Rotations are only useful if we can use them. When new nodes are inserted into the tree, they can break the red-black properties. We'll fix that by rotating the tree as new nodes are inserted, ensuring the tree remains balanced.

--------------------------------L8 : Quiz --------------------------------

Red-Black Tree Rules
Each node is either red or black
The root is black. This rule is sometimes omitted. Since the root can always be changed from red to black, but not necessarily vice versa, this rule has little effect on analysis.
All Nil leaf nodes are black.
If a node is red, then both its children are black.
All paths from a single node go through the same number of black nodes in order to reach any of its descendant NIL nodes.

